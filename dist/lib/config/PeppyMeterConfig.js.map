{"version":3,"file":"PeppyMeterConfig.js","sourceRoot":"","sources":["../../../src/lib/config/PeppyMeterConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\nimport { dirExists, fifoExists, fileExists } from '../utils/System';\nimport deepEqual from 'deep-equal';\nimport pm from '../PeppyMeterContext';\nimport path from 'path';\nimport { FIFOPathConfig, PluginConfigSchema, ScreenSizeConfig } from './PluginConfig';\nimport { METER_TEMPLATE_DIR, PEPPYMETER_CONFIG_FILE, PEPPYMETER_CONFIG_TEMPLATE_FILE } from '../utils/Constants';\nimport { PeppyAlsaPipePluginListener } from './PeppyAlsaPipePluginListener';\nimport { FontHelper } from '../utils/FontHelper';\nimport { getMeterScreenSize } from '../utils/MeterTemplate';\n\ntype ConfigKey =\n  'template' |\n  'meter' |\n  'changeInterval' |\n  'screenSize' |\n  'useCache' |\n  'smoothBufferSize' |\n  'mouseSupport' |\n  'font' |\n  'fifoPath';\n\nconst CONFIG_KEYS: Array<ConfigKey> = [\n  'template',\n  'meter',\n  'changeInterval',\n  'screenSize',\n  'useCache',\n  'smoothBufferSize',\n  'mouseSupport',\n  'font',\n  'fifoPath'\n];\n\ninterface ConfigValues {\n  template: PluginConfigSchema['template']['defaultValue'],\n  meter: PluginConfigSchema['meter']['defaultValue'],\n  changeInterval: PluginConfigSchema['changeInterval']['defaultValue'],\n  screenSize: PluginConfigSchema['screenSize']['defaultValue'],\n  useCache: PluginConfigSchema['useCache']['defaultValue'],\n  smoothBufferSize: PluginConfigSchema['smoothBufferSize']['defaultValue'],\n  mouseSupport: PluginConfigSchema['mouseSupport']['defaultValue'],\n  font: PluginConfigSchema['font']['defaultValue'],\n  fifoPath: PluginConfigSchema['fifoPath']['defaultValue']\n}\n\nexport interface Dimensions {\n  width?: number;\n  height?: number;\n}\n\ninterface CommitValues {\n  template: string;\n  meter: string;\n  changeInterval: number;\n  screenWidth: number;\n  screenHeight: number;\n  useCache: boolean;\n  smoothBufferSize: number;\n  mouseSupport: boolean;\n  fontPath: string;\n  fontLight: string;\n  fontRegular: string;\n  fontBold: string;\n  fifoPath: string;\n}\n\nconst CONFIG_TMPL_KEY_MAP: Record<keyof CommitValues, string> = {\n  template: 'TEMPLATE',\n  meter: 'METER',\n  changeInterval: 'RANDOM_INTERVAL',\n  screenWidth: 'SCREEN_WIDTH',\n  screenHeight: 'SCREEN_HEIGHT',\n  useCache: 'USE_CACHE',\n  smoothBufferSize: 'SMOOTH_BUFFER_SIZE',\n  mouseSupport: 'MOUSE_SUPPORT',\n  fontPath: 'FONT_PATH',\n  fontLight: 'FONT_LIGHT',\n  fontRegular: 'FONT_REGULAR',\n  fontBold: 'FONT_BOLD',\n  fifoPath: 'FIFO_PATH'\n} as const;\n\nexport default class PeppyMeterConfig {\n\n  static #configTmpl: string | null = null;\n  static #configValues: Partial<ConfigValues> = {};\n  static #validationErrors: Partial<Record<ConfigKey, string>> = {};\n  static #lastCommitedValues: CommitValues | null = null;\n\n  static load() {\n    this.#validationErrors = {};\n\n    if (!fileExists(PEPPYMETER_CONFIG_TEMPLATE_FILE)) {\n      throw Error('PeppyMeter config template missing');\n    }\n    this.#configTmpl = readFileSync(PEPPYMETER_CONFIG_TEMPLATE_FILE, { encoding: 'utf-8' });\n\n    this.#assertConfigTmplLoaded();\n    this.set('template', pm.getConfigValue('template'), true);\n    this.set('meter', pm.getConfigValue('meter'), true);\n    this.set('changeInterval', pm.getConfigValue('changeInterval'), true);\n    this.set('screenSize', pm.getConfigValue('screenSize'), true);\n    this.set('useCache', pm.getConfigValue('useCache'), true);\n    this.set('smoothBufferSize', pm.getConfigValue('smoothBufferSize'), true);\n    this.set('mouseSupport', pm.getConfigValue('mouseSupport'), true);\n    this.set('font', pm.getConfigValue('font'), true);\n    this.set('fifoPath', pm.getConfigValue('fifoPath'), true);\n\n    if (Object.keys(this.#validationErrors).length > 0) {\n      return {\n        errors: this.#validationErrors\n      };\n    }\n\n    return {\n      errors: false\n    };\n  }\n\n  static #assertConfigTmplLoaded() {\n    if (this.#configTmpl === null) {\n      throw Error('PeppyMeter config template not loaded');\n    }\n    return true;\n  }\n\n  static set<T extends ConfigKey>(field: T, value: ConfigValues[T], force = false) {\n    this.#assertConfigTmplLoaded();\n    if (field !== 'template' && deepEqual(this.#configValues[field], value)) {\n      return;\n    }\n    if (field === 'template') {\n      delete this.#validationErrors[field];\n      const folder = value ? path.resolve(METER_TEMPLATE_DIR, value as any) : null;\n      if (!folder) {\n        this.#validationErrors[field] = 'Template folder not specified';\n      }\n      else if (!dirExists(folder)) {\n        this.#validationErrors[field] = `Folder '${value}' does not exist`;\n      }\n      if (!this.#validationErrors[field] || force) {\n        this.#configValues[field] = value;\n      }\n      else {\n        throw Error(this.#validationErrors[field]);\n      }\n    }\n    else if (field === 'changeInterval') {\n      delete this.#validationErrors[field];\n      if (typeof value !== 'number' || value < 10) {\n        this.#validationErrors[field] = 'Meter Change Interval must be 10 or greater';\n      }\n      if (!this.#validationErrors[field] || force) {\n        this.#configValues[field] = value;\n      }\n      else {\n        throw Error(this.#validationErrors[field]);\n      }\n    }\n    else if (field === 'screenSize') {\n      delete this.#validationErrors[field];\n      const screenSizeConfig = value as ScreenSizeConfig;\n      if (screenSizeConfig.type === 'manual' && (screenSizeConfig.width <= 0 || screenSizeConfig.height <= 0)) {\n        this.#validationErrors[field] = 'Invalid screen dimensions';\n      }\n      if (!this.#validationErrors[field] || force) {\n        this.#configValues[field] = value;\n      }\n      else {\n        throw Error(this.#validationErrors[field]);\n      }\n    }\n    else if (field === 'fifoPath') {\n      delete this.#validationErrors[field];\n      const fifoPathConfig = value as FIFOPathConfig;\n      if (fifoPathConfig.type === 'manual' && !fifoPathConfig.path) {\n        this.#validationErrors[field] = 'FIFO path not specified';\n      }\n      if (!this.#validationErrors[field] || force) {\n        this.#configValues[field] = value;\n      }\n      else {\n        throw Error(this.#validationErrors[field]);\n      }\n    }\n    else {\n      this.#configValues[field] = value;\n    }\n  }\n\n  static commit(dryRun = false) {\n    this.#assertConfigTmplLoaded();\n\n    const errFields = Object.keys(this.#validationErrors) as ConfigKey[];\n    if (errFields.length > 0) {\n      if (errFields.length === 1) {\n        throw Error(this.#validationErrors[errFields[0]]);\n      }\n      throw Error(`PeppyMeter config has invalid values for: ${errFields.join(', ')}`);\n    }\n\n    const missingFields = CONFIG_KEYS.filter(\n      (f) => this.#configValues[f] == undefined);\n    if (missingFields.length > 0) {\n      throw Error(`PeppyMeter config is missing the following fields: ${missingFields.join(', ')}`);\n    }\n\n    const checkedFieldValues = this.#configValues as ConfigValues;\n\n    const fontConfig = checkedFieldValues['font'];\n    const fontDef = FontHelper.getFontDefByConfig(fontConfig);\n    if (!fontDef) {\n      throw Error(`Could not obtain font definition for '${fontConfig.id}'`);\n    }\n    else if (!FontHelper.checkPaths(fontDef)) {\n      throw Error(`Font path missing for '${fontDef.shortName}'`);\n    }\n\n    const screenSizeConfig = checkedFieldValues['screenSize'];\n    const screenSize: Dimensions = {};\n    if (screenSizeConfig.type === 'manual') {\n      screenSize.width = screenSizeConfig.width;\n      screenSize.height = screenSizeConfig.height;\n    }\n    else {\n      const dimensions = getMeterScreenSize(checkedFieldValues['template'], checkedFieldValues['meter'].toString());\n      if (!dimensions || !dimensions.width || !dimensions.height) {\n        throw Error(`Could not obtain valid screen dimensions from ${checkedFieldValues['template']}`);\n      }\n      screenSize.width = dimensions.width;\n      screenSize.height = dimensions.height;\n    }\n\n    const fifoPathConfig = checkedFieldValues['fifoPath'];\n    let fifoPath: string | null = null;\n    if (fifoPathConfig.type === 'manual') {\n      fifoPath = fifoPathConfig.path;\n    }\n    else if (fifoPathConfig.type === 'peppyAlsaPlugin') {\n      fifoPath = this.#getFIFOPathFromPeppyAlsaPipePlugin();\n      if (!fifoPath) {\n        throw Error('Could not obtain FIFO path from Peppy ALSA Pipe plugin');\n      }\n    }\n    if (!fifoPath || !fifoExists(fifoPath)) {\n      throw Error('FIFO path empty or does not exist');\n    }\n\n    const commitValues: CommitValues = {\n      template: checkedFieldValues.template,\n      meter: checkedFieldValues.meter.toString(),\n      changeInterval: checkedFieldValues.changeInterval,\n      screenWidth: screenSize.width as number,\n      screenHeight: screenSize.height as number,\n      useCache: checkedFieldValues.useCache,\n      smoothBufferSize: checkedFieldValues.smoothBufferSize,\n      mouseSupport: checkedFieldValues.mouseSupport,\n      fontPath: fontDef.path,\n      fontLight: fontDef.light,\n      fontRegular: fontDef.regular,\n      fontBold: fontDef.bold,\n      fifoPath: fifoPath\n    };\n\n    if (this.#lastCommitedValues && deepEqual(this.#lastCommitedValues, commitValues)) {\n      // Return value `false`:  config has not changed.\n      return false;\n    }\n\n    if (!dryRun) {\n      let out = this.#configTmpl as string;\n      for (const [ key, value ] of Object.entries(commitValues)) {\n        const tmplKey = `\\${${CONFIG_TMPL_KEY_MAP[key as keyof CommitValues]}}`;\n        let outValue;\n        if (typeof value === 'boolean') {\n          outValue = value ? 'True' : 'False';\n        }\n        else if (value == null) {\n          outValue = '';\n        }\n        else {\n          outValue = value.toString();\n        }\n        out = out.replace(tmplKey, outValue);\n      }\n\n      writeFileSync(PEPPYMETER_CONFIG_FILE, out, { encoding: 'utf-8' });\n\n      this.#lastCommitedValues = commitValues;\n    }\n\n    // Return value `true`: config has changed.\n    return true;\n  }\n\n  static #getFIFOPathFromPeppyAlsaPipePlugin() {\n    return PeppyAlsaPipePluginListener.getFIFOPath();\n  }\n\n  static getValidationErrors() {\n    if (Object.keys(this.#validationErrors).length > 0) {\n      return this.#validationErrors;\n    }\n    return null;\n  }\n\n  static unload() {\n    this.#configTmpl = null;\n    this.#configValues = {};\n    this.#validationErrors = {};\n    this.#lastCommitedValues = null;\n  }\n}\n"]}