{"version":3,"file":"MeterTemplateMonitor.js","sourceRoot":"","sources":["../../src/lib/MeterTemplateMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport pm from './PeppyMeterContext';\nimport FSMonitor from './utils/FSMonitor';\nimport chokidar from 'chokidar';\nimport Queue from 'queue';\nimport ConfigParser from 'configparser';\nimport { METER_TEMPLATE_DIR } from './utils/Constants';\n\nexport default class MeterTemplateMonitor extends FSMonitor<['addDir', 'unlinkDir']> {\n\n  name = 'MeterTemplateMonitor';\n\n  #templateFolderMonitors: Record<string, ReturnType<typeof chokidar['watch']>>;\n  #templates: Array<{name: string; meters: string[]}>;\n  #isSorted: boolean;\n  #queue: Queue;\n  #isTemplateUpdating: boolean;\n\n  constructor() {\n    super(METER_TEMPLATE_DIR, [ 'addDir', 'unlinkDir' ]);\n    this.#templateFolderMonitors = {};\n    this.#templates = [];\n    this.#isSorted = false;\n    this.#queue = new Queue({\n      concurrency: 1,\n      autostart: true\n    });\n    this.#isTemplateUpdating = false;\n  }\n\n  getTemplates() {\n    if (this.status === 'stopped') {\n      pm.getLogger().warn('[peppymeter] MeterTemplateMonitor is not running. Returning empty image list.');\n      return [];\n    }\n    if (!this.#isSorted) {\n      this.#sortTemplates();\n    }\n    return this.#templates;\n  }\n\n  async stop() {\n    this.#queue.end();\n    const closeMonitorPromises = Object.keys(this.#templateFolderMonitors).map((t) => this.#removeTemplateFolderMonitor(t));\n    await Promise.all(closeMonitorPromises);\n    this.#templateFolderMonitors = {};\n    await super.stop();\n    this.#templates = [];\n    this.#isSorted = false;\n    this.#isTemplateUpdating = false;\n  }\n\n  async #removeTemplateFolderMonitor(template: string) {\n    const monitor = this.#templateFolderMonitors[template];\n    if (monitor) {\n      try {\n        monitor.removeAllListeners();\n        await monitor.close();\n      }\n      catch (error) {\n        pm.getLogger().warn(pm.getErrorMessage(\n          `[peppymeter] MeterTemplateMonitor failed to close template folder monitor for '${template}':`, error, true));\n      }\n      finally {\n        delete this.#templateFolderMonitors[template];\n      }\n    }\n  }\n\n  protected handleEvent(event: 'addDir' | 'unlinkDir', _path: string): void {\n    const { base: template } = path.parse(_path);\n\n    pm.getLogger().info(`[peppymeter] MeterTemplateMonitor captured '${event}': ${template}`);\n\n    switch (event) {\n      case 'addDir':\n        this.#queue.push(() => this.#addTemplateFolderMonitor(template));\n        break;\n      case 'unlinkDir':\n        this.#queue.push(async () => {\n          await this.#removeTemplateFolderMonitor(template);\n          this.#removeTemplate(template);\n        });\n        break;\n    }\n  }\n\n  #sortTemplates() {\n    this.#templates.sort((t1, t2) => t1.name.localeCompare(t2.name));\n    this.#isSorted = true;\n  }\n\n  async #addTemplateFolderMonitor(template: string) {\n    await this.#removeTemplateFolderMonitor(template);\n    const templatePath = `${METER_TEMPLATE_DIR}/${template}`;\n    const monitor = chokidar.watch(templatePath);\n    this.#templateFolderMonitors[template] = monitor;\n\n    const _parseAndAdd = (silent = false) => {\n      if (!this.#templates.find((t) => t.name === template)) {\n        this.#isTemplateUpdating = true;\n        const meters = this.#getMetersFromTemplate(template);\n        if (meters) {\n          this.#templates.push({\n            name: template,\n            meters\n          });\n          this.#isSorted = false;\n          if (!silent) {\n            pm.getLogger().info(`[peppymeter] Added meter template '${template}'`);\n          }\n        }\n        this.#isTemplateUpdating = false;\n      }\n    };\n\n    const _remove = (silent = false) => {\n      this.#isTemplateUpdating = true;\n      this.#removeTemplate(template, silent);\n      this.#isTemplateUpdating = false;\n    };\n\n    const _refresh = (silent = false) => {\n      _remove(true);\n      _parseAndAdd(true);\n      if (!silent) {\n        pm.getLogger().info(`[peppymeter] Refreshed meter template '${template}'`);\n      }\n    };\n\n    const _isMeterTxt = (_path: string) => {\n      const { base } = path.parse(_path);\n      return base === 'meters.txt';\n    };\n\n    monitor.on('add', (_path: string) => {\n      if (_isMeterTxt(_path)) {\n        _parseAndAdd();\n      }\n    });\n\n    monitor.on('unlink', (_path: string) => {\n      if (_isMeterTxt(_path)) {\n        _remove();\n      }\n    });\n\n    monitor.on('change', (_path: string) => {\n      if (_isMeterTxt(_path)) {\n        _refresh();\n      }\n    });\n\n    return monitor;\n  }\n\n  #removeTemplate(template: string, silent = false) {\n    const index = this.#templates.findIndex((t) => t.name === template);\n    if (index >= 0) {\n      this.#templates.splice(index, 1);\n      if (!silent) {\n        pm.getLogger().info(`[peppymeter] Removed meter template '${template}'`);\n      }\n    }\n  }\n\n  get status() {\n    const mainStatus = super.status;\n    if (this.#isTemplateUpdating && mainStatus === 'running') {\n      return 'updating';\n    }\n    return mainStatus;\n  }\n\n  #getMetersFromTemplate(template: string) {\n    const configPath = path.resolve(METER_TEMPLATE_DIR, template, 'meters.txt');\n    const config = new ConfigParser();\n    try {\n      config.read(configPath);\n      const sections = config.sections();\n      if (sections.length > 0) {\n        return sections;\n      }\n\n      pm.getLogger().info(`[peppymeter] No meters defined in '${template}`);\n      return null;\n\n    }\n    catch (error) {\n      pm.getLogger().error(\n        pm.getErrorMessage(`[peppymeter] Error reading \"${configPath}\":`, error));\n      return null;\n    }\n  }\n}\n"]}