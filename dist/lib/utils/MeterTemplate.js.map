{"version":3,"file":"MeterTemplate.js","sourceRoot":"","sources":["../../../src/lib/utils/MeterTemplate.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { METER_TEMPLATE_DIR } from './Constants';\nimport { listDirectories } from './System';\nimport ConfigParser from 'configparser';\nimport pm from '../PeppyMeterContext';\nimport imageSize from 'image-size';\nimport { Dimensions } from '../config/PeppyMeterConfig';\n\nexport async function getTemplateFolderList() {\n  try {\n    const dirs = await listDirectories(METER_TEMPLATE_DIR);\n    sort(dirs);\n    return dirs;\n  }\n  catch (error) {\n    pm.getLogger().error(\n      pm.getErrorMessage(`[peppymeter] Error getting template folder list from ${METER_TEMPLATE_DIR}:`, error));\n    pm.toast('error', pm.getI18n('PEPPYMETER_ERR_READ_TEMPLATE_FOLDERS', pm.getErrorMessage('', error, false)));\n    return [];\n  }\n}\n\nexport function getMeterList(template: string) {\n  try {\n    const config = getMeterConfig(template);\n    const sections = config.sections();\n    if (sections.length > 0) {\n      sections.sort();\n      return sections;\n    }\n\n    pm.getLogger().info(`[peppymeter] No meters defined in '${template}`);\n    pm.toast('error', pm.getI18n('PEPPYMETER_ERR_NO_METERS', template));\n    return [];\n  }\n  catch (error) {\n    return [];\n  }\n}\n\nexport function getMeterScreenSize(template: string, meter: string): Dimensions | null {\n  let config: ConfigParser;\n  try {\n    config = getMeterConfig(template);\n  }\n  catch (error) {\n    return null;\n  }\n  try {\n    const sections = config.sections();\n    if (sections.length === 0) {\n      return null;\n    }\n    let meterList: string[];\n    if (meter.includes(',')) {\n      meterList = meter.split(',').map((m) => m.trim());\n    }\n    else if (meter === 'random') {\n      meterList = getMeterList(template);\n    }\n    else {\n      meterList = [ meter ];\n    }\n    const __getImgFile = (key: string) => {\n      let value: string | undefined;\n      for (const m of meterList) {\n        value = config.get(m, key);\n        if (value) {\n          break;\n        }\n      }\n      return value;\n    };\n    const imgFile = __getImgFile('screen.bgr') || __getImgFile('bgr.filename');\n    if (imgFile) {\n      const imgPath = path.resolve(METER_TEMPLATE_DIR, template, imgFile);\n      const result = imageSize(imgPath);\n      pm.getLogger().info(`[peppymeter] Meter screen size for ${template} -> ${meter}: ${result.width}x${result.height}px (obtained from ${imgFile})`);\n      return result;\n    }\n\n    return null;\n  }\n  catch (error) {\n    pm.getLogger().error(\n      pm.getErrorMessage(`[peppymeter] Error getting meter screen size for ${template} -> ${meter}:`, error));\n    return null;\n  }\n}\n\nfunction getMeterConfig(template: string) {\n  const configPath = path.resolve(METER_TEMPLATE_DIR, template, 'meters.txt');\n  const config = new ConfigParser();\n  try {\n    config.read(configPath);\n    return config;\n  }\n  catch (error) {\n    pm.getLogger().error(\n      pm.getErrorMessage(`[peppymeter] Error reading \"${configPath}\":`, error));\n    pm.toast('error', pm.getI18n('PEPPYMETER_ERR_READ_METERS', pm.getErrorMessage('', error, false)));\n    throw error;\n  }\n}\n\nfunction sort(elements: string[]) {\n  elements.sort((t1, t2) => t1.localeCompare(t2));\n}\n"]}