{"version":3,"file":"MeterTemplate.js","sourceRoot":"","sources":["../../../src/lib/utils/MeterTemplate.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AACxB,2CAAiD;AACjD,qCAA2C;AAC3C,gEAAwC;AACxC,6EAAsC;AAE/B,KAAK,UAAU,qBAAqB;IACzC,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,IAAA,wBAAe,EAAC,8BAAkB,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,CAAC;QACX,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,EAAE;QACZ,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAClB,2BAAE,CAAC,eAAe,CAAC,wDAAwD,8BAAkB,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5G,2BAAE,CAAC,KAAK,CAAC,OAAO,EAAE,2BAAE,CAAC,OAAO,CAAC,sCAAsC,EAAE,2BAAE,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5G,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAZD,sDAYC;AAED,SAAgB,YAAY,CAAC,QAAgB;IAC3C,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,8BAAkB,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAC5E,MAAM,MAAM,GAAG,IAAI,sBAAY,EAAE,CAAC;IAClC,IAAI;QACF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxB,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACnC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChB,OAAO,QAAQ,CAAC;SACjB;QAED,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,sCAAsC,UAAU,EAAE,CAAC,CAAC;QACxE,2BAAE,CAAC,KAAK,CAAC,OAAO,EAAE,2BAAE,CAAC,OAAO,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC,CAAC;QACpE,OAAO,EAAE,CAAC;KACX;IACD,OAAO,KAAK,EAAE;QACZ,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAClB,2BAAE,CAAC,eAAe,CAAC,+BAA+B,UAAU,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5E,2BAAE,CAAC,KAAK,CAAC,OAAO,EAAE,2BAAE,CAAC,OAAO,CAAC,4BAA4B,EAAE,2BAAE,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClG,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AArBD,oCAqBC;AAED,SAAS,IAAI,CAAC,QAAkB;IAC9B,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;AAClD,CAAC","sourcesContent":["import path from 'path';\nimport { METER_TEMPLATE_DIR } from './Constants';\nimport { listDirectories } from './System';\nimport ConfigParser from 'configparser';\nimport pm from '../PeppyMeterContext';\n\nexport async function getTemplateFolderList() {\n  try {\n    const dirs = await listDirectories(METER_TEMPLATE_DIR);\n    sort(dirs);\n    return dirs;\n  }\n  catch (error) {\n    pm.getLogger().error(\n      pm.getErrorMessage(`[peppymeter] Error getting template folder list from ${METER_TEMPLATE_DIR}:`, error));\n    pm.toast('error', pm.getI18n('PEPPYMETER_ERR_READ_TEMPLATE_FOLDERS', pm.getErrorMessage('', error, false)));\n    return [];\n  }\n}\n\nexport function getMeterList(template: string) {\n  const configPath = path.resolve(METER_TEMPLATE_DIR, template, 'meters.txt');\n  const config = new ConfigParser();\n  try {\n    config.read(configPath);\n    const sections = config.sections();\n    if (sections.length > 0) {\n      sections.sort();\n      return sections;\n    }\n\n    pm.getLogger().info(`[peppymeter] No meters defined in '${configPath}`);\n    pm.toast('error', pm.getI18n('PEPPYMETER_ERR_NO_METERS', template));\n    return [];\n  }\n  catch (error) {\n    pm.getLogger().error(\n      pm.getErrorMessage(`[peppymeter] Error reading \"${configPath}\":`, error));\n    pm.toast('error', pm.getI18n('PEPPYMETER_ERR_READ_METERS', pm.getErrorMessage('', error, false)));\n    return [];\n  }\n}\n\nfunction sort(elements: string[]) {\n  elements.sort((t1, t2) => t1.localeCompare(t2));\n}"]}