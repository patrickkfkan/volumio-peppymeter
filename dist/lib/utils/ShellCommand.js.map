{"version":3,"file":"ShellCommand.js","sourceRoot":"","sources":["../../../src/lib/utils/ShellCommand.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess, spawn } from 'child_process';\nimport pidtree from 'pidtree';\nimport pm from '../PeppyMeterContext';\n\nexport interface ShellCommandOptions {\n  sudo?: boolean;\n  logging?: boolean;\n}\n\nexport class ShellCommand {\n\n  #status: 'ready' | 'running' | 'killing';\n  #cmd: string;\n  #sudo: boolean;\n  #logging: boolean;\n  #process: ChildProcess | null;\n\n  constructor(cmd: string, options?: ShellCommandOptions) {\n    this.#cmd = cmd;\n    this.#sudo = options?.sudo !== undefined ? options.sudo : false;\n    this.#logging = options?.logging !== undefined ? options.logging : true;\n    this.#process = null;\n    this.#status = 'ready';\n  }\n\n  exec() {\n    if (this.#process) {\n      throw Error('Command execution already in progress');\n    }\n    return new Promise<string>((resolve, reject) => {\n      this.#status = 'running';\n      let lastError: Error | null = null;\n      let out = '';\n\n      const s = spawn(this.#sudo ? `echo volumio | sudo -S ${this.#cmd}` : this.#cmd, { uid: 1000, gid: 1000, shell: true });\n      const pid = s.pid;\n\n      if (this.#logging) {\n        pm.getLogger().info(`[peppymeter] (PID: ${pid}) Process spawned for cmd: ${this.#cmd}`);\n      }\n\n      s.stdout.on('data', (msg) => {\n        if (this.#logging) {\n          pm.getLogger().info(`[peppymeter] (PID: ${pid}) Process stdout: ${msg.toString()}`);\n        }\n        out += msg.toString();\n      });\n      s.stderr.on('data', (msg) => {\n        if (this.#logging) {\n          pm.getLogger().info(`[peppymeter] (PID: ${pid}) Process stderr: ${msg.toString()}`);\n        }\n      });\n      s.on('close', (code, signal) => {\n        if (this.#logging) {\n          const withErr = lastError ? ' with error' : '';\n          pm.getLogger().info(`[peppymeter] (PID: ${pid}) Process closed${withErr} - code: ${code}, signal: ${signal}`);\n        }\n        if (this.#status !== 'killing' && lastError) {\n          reject(lastError);\n        }\n        this.#reset();\n        resolve(out);\n      });\n      s.on('error', (err) => {\n        const isKilling = this.#status !== 'killing';\n        if (this.#logging && !isKilling) {\n          pm.getLogger().error(`[peppymeter] (PID: ${pid}) Process error: ${err.message}`);\n        }\n        if (!isKilling) {\n          lastError = err;\n        }\n      });\n\n      this.#process = s;\n    });\n  }\n\n  setLogging(value: boolean) {\n    this.#logging = value;\n  }\n\n  async kill() {\n    if (this.#status !== 'running' || !this.#process) {\n      throw Error('Command is not running');\n    }\n    this.#status = 'killing';\n    const proc = this.#process;\n    return new Promise<void>(async (resolve) => {\n      try {\n        const tree = await pidtree(proc.pid, { root: true });\n        const target = tree.pop();\n        if (target) {\n          pm.getLogger().info(`[peppymeter] Killing last child of process tree (pids: ${tree.join(' ')} *${target}*)`);\n          proc.once('close', () => {\n            this.#reset();\n            resolve();\n          });\n          await this.#sigkill(target);\n        }\n      }\n      catch (error) {\n        pm.getLogger().error(\n          pm.getErrorMessage('[peppymeter] Failed to kill process - resolving anyway:', error, false));\n        this.#reset();\n        resolve();\n      }\n    });\n  }\n\n  async #sigkill(pid: number) {\n    return new ShellCommand(`/bin/kill -9 ${pid}`).exec();\n  }\n\n  #reset() {\n    if (this.#process) {\n      this.#process.stdout?.removeAllListeners();\n      this.#process.stderr?.removeAllListeners();\n      this.#process.removeAllListeners();\n      this.#process = null;\n      this.#status = 'ready';\n    }\n  }\n\n  get status() {\n    return this.#status;\n  }\n}\n"]}