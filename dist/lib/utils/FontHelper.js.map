{"version":3,"file":"FontHelper.js","sourceRoot":"","sources":["../../../src/lib/utils/FontHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,gDAAwB;AACxB,6EAAsC;AAEtC,2CAA+C;AAC/C,qCAAsC;AAEtC,MAAa,UAAU;IAErB,MAAM,CAAC,kBAAkB,CAAC,IAAgB;QACxC,OAAO,4BAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,GAAY;QAC5B,MAAM,SAAS,GAAG,uBAAA,IAAI,mCAAa,MAAjB,IAAI,EAAc,GAAG,EAAE,OAAO,CAAC,CAAC;QAClD,MAAM,WAAW,GAAG,uBAAA,IAAI,mCAAa,MAAjB,IAAI,EAAc,GAAG,EAAE,SAAS,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,uBAAA,IAAI,mCAAa,MAAjB,IAAI,EAAc,GAAG,EAAE,MAAM,CAAC,CAAC;QAChD,IAAI,OAAO,GAAkB,IAAI,CAAC;QAClC,IAAI,CAAC,IAAA,mBAAU,EAAC,SAAS,CAAC,EAAE;YAC1B,OAAO,GAAG,SAAS,CAAC;SACrB;aACI,IAAI,CAAC,IAAA,mBAAU,EAAC,WAAW,CAAC,EAAE;YACjC,OAAO,GAAG,WAAW,CAAC;SACvB;aACI,IAAI,CAAC,IAAA,mBAAU,EAAC,QAAQ,CAAC,EAAE;YAC9B,OAAO,GAAG,QAAQ,CAAC;SACpB;QACD,IAAI,OAAO,EAAE;YACX,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,mCAAmC,OAAO,EAAE,CAAC,CAAC;YACnE,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CAcF;AAxCD,gCAwCC;4EAZqB,GAAY,EAAE,KAAmC;IACnE,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC;IACvB,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;IACzB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE;QACjB,OAAO,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAC5B;IACD,IAAI,CAAC,GAAG,KAAK,CAAC;IACd,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACzB,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,OAAO,cAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAChC,CAAC","sourcesContent":["import path from 'path';\nimport pm from '../PeppyMeterContext';\nimport { FontConfig, FontDef } from '../config/PluginConfig';\nimport { PREDEFINED_FONTS } from './Constants';\nimport { fileExists } from './System';\n\nexport class FontHelper {\n\n  static getFontDefByConfig(conf: FontConfig) {\n    return PREDEFINED_FONTS.find((f) => f.id === conf.id) || null;\n  }\n\n  static checkPaths(def: FontDef) {\n    const lightPath = this.#resolvePath(def, 'light');\n    const regularPath = this.#resolvePath(def, 'regular');\n    const boldPath = this.#resolvePath(def, 'bold');\n    let missing: string | null = null;\n    if (!fileExists(lightPath)) {\n      missing = lightPath;\n    }\n    else if (!fileExists(regularPath)) {\n      missing = regularPath;\n    }\n    else if (!fileExists(boldPath)) {\n      missing = boldPath;\n    }\n    if (missing) {\n      pm.getLogger().error(`[peppymeter] Font path missing: ${missing}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  static #resolvePath(def: FontDef, style: 'light' | 'regular' | 'bold') {\n    const path1 = def.path;\n    const path2 = def[style];\n    if (!path1.trim()) {\n      return path.resolve(path2);\n    }\n    let p = path2;\n    if (path2.startsWith('/')) {\n      p = path2.substring(1);\n    }\n    return path.resolve(path1, p);\n  }\n}\n"]}