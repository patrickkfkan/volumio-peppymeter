{"version":3,"file":"PeppyMeter.js","sourceRoot":"","sources":["../../src/lib/PeppyMeter.ts"],"names":[],"mappings":"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","sourcesContent":["import io from 'socket.io-client';\nimport pm from './PeppyMeterContext';\nimport PeppyMeterConfig from './config/PeppyMeterConfig';\nimport { PEPPYMETER_RUN_SCRIPT } from './utils/Constants';\nimport { ShellCommand } from './utils/ShellCommand';\n\nexport interface PeppyMeterRestartOptions {\n  policy?: 'always' | 'configChanged'\n}\n\n// Volumio state\ninterface PlayerState {\n  service: string;\n  status: 'play' | 'pause' | 'stop';\n  title?: string;\n  artist?: string;\n  album?: string;\n  albumart?: string;\n  uri: '';\n  trackType?: string;\n  seek?: number;\n  duration?: number;\n  samplerate?: string;\n  bitdepth?: string;\n  bitrate?: string;\n  channels?: number;\n  volume?: number;\n  mute?: boolean;\n  isStreaming?: boolean;\n  repeat?: boolean;\n  repeatSingle?: boolean;\n  random?: boolean;\n  position?: number;\n}\n\nconst HOST = 'http://localhost:3000';\n\nexport default class PeppyMeterManager {\n\n  static #socket: SocketIOClient.Socket | null = null;\n  static #lastPlayerState: PlayerState | null = null;\n  static #startTimer: NodeJS.Timeout | null = null;\n  static #command = this.#initCommand();\n  static #restarting = false;\n\n  static #initCommand() {\n    return new ShellCommand(PEPPYMETER_RUN_SCRIPT);\n  }\n\n  static enable() {\n    if (!this.#socket) {\n      this.#socket = io.connect(HOST, { autoConnect: false });\n      this.#socket.on('connect', this.#handleSocketConnect.bind(this));\n      this.#socket.on('pushState', this.#handlePlayerStateChange.bind(this));\n      this.#socket.connect();\n    }\n  }\n\n  static async disable() {\n    this.#clearStartTimer();\n    if (this.#socket) {\n      this.#socket.removeAllListeners();\n      this.#socket.disconnect();\n      this.#socket = null;\n    }\n    this.#lastPlayerState = null;\n\n    return this.stop();\n  }\n\n  static #handleSocketConnect() {\n    if (this.#socket) {\n      this.#socket.emit('getState');\n    }\n  }\n\n  static #clearStartTimer() {\n    if (this.#startTimer) {\n      clearTimeout(this.#startTimer);\n      this.#startTimer = null;\n    }\n  }\n\n  static #handlePlayerStateChange(state: PlayerState) {\n    if (!this.isEnabled() || this.#restarting) {\n      return;\n    }\n\n    const lastStateIsPlaying = (this.#lastPlayerState && this.#lastPlayerState.status === 'play');\n    if (state.status === 'play' && !lastStateIsPlaying) {\n      const timeout = pm.getConfigValue('startDelay');\n      pm.getLogger().info(`[peppymeter] PeppyMeter will start in ${timeout} seconds`);\n      this.#startTimer = setTimeout(async () => {\n        if (this.#command.status !== 'ready') {\n          pm.getLogger().info('[peppymeter] PeppyMeter process already running');\n          return;\n        }\n        await this.#start();\n      }, timeout * 1000);\n\n    }\n    else if (state.status !== 'play' && lastStateIsPlaying) {\n      this.#clearStartTimer();\n    }\n\n    this.#lastPlayerState = state;\n  }\n\n  static isEnabled() {\n    return !!this.#socket;\n  }\n\n  static async #start(callback?: () => void) {\n    try {\n      PeppyMeterConfig.commit();\n    }\n    catch (error) {\n      pm.getLogger().error(\n        pm.getErrorMessage('[peppymeter] PeppyMeter configuration error:', error, false));\n      pm.toast('error', pm.getI18n('PEPPYMETER_ERR_START', pm.getErrorMessage('', error, false)));\n      if (callback) {\n        callback();\n      }\n      return;\n    }\n    try {\n      pm.getLogger().info('[peppymeter] Starting PeppyMeter process');\n      const execPromise = this.#command.exec();\n      if (callback) {\n        callback();\n      }\n      await execPromise;\n    }\n    catch (error) {\n      pm.getLogger().error(\n        pm.getErrorMessage('[peppymeter] PeppyMeter process error:', error, true));\n      pm.toast('error', pm.getI18n('PEPPYMETER_ERR_START', pm.getErrorMessage('', error, false)));\n    }\n  }\n\n  static async stop() {\n    if (this.#command.status === 'running') {\n      return this.#command.kill();\n    }\n  }\n\n  static async restart(options: PeppyMeterRestartOptions = { policy: 'always' }) {\n    const restartPolicy = options.policy || 'always';\n    if (restartPolicy === 'configChanged') {\n      let configChanged: boolean;\n      try {\n        configChanged = PeppyMeterConfig.commit(true);\n      }\n      catch (error) {\n        // Proceed even if there are errors, so they can be handled later in `start()`.\n        configChanged = true;\n      }\n      if (!configChanged) {\n        return;\n      }\n    }\n\n    const onEnd = () => {\n      this.#restarting = false;\n      pm.getLogger().info('[peppymeter] PeppyMeter restart end');\n    };\n\n    if (this.#restarting) {\n      return;\n    }\n    pm.getLogger().info('[peppymeter] PeppyMeter restart begin');\n    this.#clearStartTimer();\n    this.#restarting = true;\n    await this.stop();\n    const state = pm.getVolumioState();\n    if (state && state.status === 'play') {\n      await this.#start(() => {\n        onEnd();\n      });\n    }\n    else {\n      onEnd();\n    }\n  }\n\n  static isRunning() {\n    return this.#command.status === 'running';\n  }\n}\n"]}